format_version: 4
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git

app:
  envs:
  - API_TOKEN: $API_TOKEN
  - BITRISE_APP_SLUG: $BITRISE_APP_SLUG
  - WORKFLOW_ID: $WORKFLOW_ID
  - EXPORTED_ENVIRONMENT: $EXPORTED_ENVIRONMENT
  - BITRISE_STEP_ID: trigger-bitrise-workflow
  - BITRISE_STEP_VERSION: "0.0.2"
  - BITRISE_STEP_GIT_CLONE_URL: https://github.com/DroidsOnRoids/bitrise-step-trigger-bitrise-workflow.git
  - MY_STEPLIB_REPO_FORK_GIT_URL: $MY_STEPLIB_REPO_FORK_GIT_URL

workflows:
  test:
    steps:
    - script:
        title: Install testing tools
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -ex
            # Check for unhandled errors
            go get -u -v github.com/kisielk/errcheck
            # Go lint
            go get -u -v github.com/golang/lint/golint
    - script:
        title: Err check
        inputs:
        - content: errcheck -asserts=true -blank=true $GOLIST_WITHOUT_VENDOR
    - script:
        title: Go lint
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -e
            while read -r line; do
              echo "-> Linting: $line"
              golint_out="$(golint $line)"
              if [[ "${golint_out}" != "" ]] ; then
                echo "=> Golint issues found:"
                echo "${golint_out}"
                exit 1
              fi
            done <<< "$GOLIST_WITHOUT_VENDOR"
    - script:
        title: Go test
        inputs:
        - content: go test
    - change-workdir:
        title: Switch working dir to test / _tmp dir
        description: |-
          To prevent step testing issues, like referencing relative
          files with just './some-file' in the step's code, which would
          work for testing the step from this directory directly
          but would break if the step is included in another `bitrise.yml`.
        run_if: true
        inputs:
        - path: ./_tmp
        - is_create_path: true
    - path::./:
        title: Step Test
        run_if: '{{getenv "BITRISE_APP_SLUG" | ne ""}}'
        inputs:
        - workflow_id: $WORKFLOW_ID
        - api_token: $API_TOKEN
        - exported_environment_variable_names: $EXPORTED_ENVIRONMENT
    - script:
        title: Step Test skip info
        run_if: '{{enveq "BITRISE_APP_SLUG" ""}}'
        inputs:
        - content: |-
            #!/usr/bin/env bash
            echo "Step test skipped due to missing App slug"
    - script:
        inputs:
        - content: |
            #!/usr/bin/env bash
            echo "Outputs generated by this step:"
            echo "TRIGGERED_BUILD_SLUG: $TRIGGERED_BUILD_SLUG"
            echo "TRIGGERED_BUILD_NUMBER: $TRIGGERED_BUILD_NUMBER"
            echo "TRIGGERED_BUILD_URL: $TRIGGERED_BUILD_URL"
            echo "TRIGGERED_WORKFLOW_ID: $TRIGGERED_WORKFLOW_ID"

  # ----------------------------------------------------------------
  # --- workflows to Share this step into a Step Library
  audit-this-step:
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            stepman audit --step-yml ./step.yml

  share-this-step:
    envs:
      # if you want to share this step into a StepLib
      - MY_STEPLIB_REPO_FORK_GIT_URL: $MY_STEPLIB_REPO_FORK_GIT_URL
      - BITRISE_STEP_ID: $BITRISE_STEP_ID
      - BITRISE_STEP_VERSION: $BITRISE_STEP_VERSION
      - BITRISE_STEP_GIT_CLONE_URL: $BITRISE_STEP_GIT_CLONE_URL
    description: |-
      If this is the first time you try to share a Step you should
      first call: $ bitrise share

      This will print you a guide, and information about how Step sharing
      works. Please read it at least once!

      As noted in the Step sharing guide you'll have to fork the
      StepLib you want to share this step into. Once you're done with forking
      the repository you should set your own fork's git clone URL
      in the `.bitrise.secrets.yml` file, or here in the `envs` section,
      as the value of the `MY_STEPLIB_REPO_FORK_GIT_URL` environment.

      You're now ready to share this Step, just make sure that
      the `BITRISE_STEP_ID` and `BITRISE_STEP_VERSION`
      environments are set to the desired values!

      To share this Step into a StepLib you can just run: $ bitrise run share-this-step

      Once it finishes the only thing left is to actually create a Pull Request,
      the way described in the guide printed at the end of the process.
    before_run:
    - audit-this-step
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            bitrise share start -c "${MY_STEPLIB_REPO_FORK_GIT_URL}"
            bitrise share create --stepid "${BITRISE_STEP_ID}" --tag "${BITRISE_STEP_VERSION}" --git "${BITRISE_STEP_GIT_CLONE_URL}"
            bitrise share finish
